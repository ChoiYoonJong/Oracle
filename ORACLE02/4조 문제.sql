-- 1. EMP_TEST01 테이블을 생성(EMPLOYEE 테이블 구조만 복사)하고
-- EMPLOYEE 테이블에서 급여가 2500000 이상인 사원의
-- 사번, 이름, 직급코드, 부서코드, 급여, 입사일 조회하여 EMP_TEST01 테이블에 삽입

--테이블 생성
CREATE TABLE EMP_TEST1
AS 
SELECT * FROM EMPLOYEE;

--테이블 조회
SELECT * FROM EMP_TEST1;

--테이블 삭제
DROP TABLE EMP_TEST1;

--사번, 이름, 직급코드, 부서코드, 급여, 입사일 조회하 급여가 2500000 이상인 사원 EMP_TEST01 테이블에 삽입
CREATE TABLE EMP_TEST1
AS 
SELECT 
    EMP_ID ,
    EMP_NAME ,
    DEPT_CODE ,
    SALARY ,
    HIRE_DATE 
FROM EMPLOYEE
WHERE SALARY >= 2500000;

--만든 테이블 조회
SELECT * FROM EMP_TEST1;


-- 2. EMP_TEST01 에서 '유재식' 사원과 직급코드가 같은 사원의 급여를
-- '유재식' 사원과 동일하게 변경
UPDATE EMP_TEST1
SET SALARY =
            (SELECT SALARY
            FROM EMP_TEST1
            WHERE EMP_NAME = '유재식')
WHERE DEPT_CODE = 'D6';

-- 유재식 사원과 동일한 직급코드,급여
SELECT * 
FROM EMP_TEST1
WHERE DEPT_CODE = 'D6';

-- 3. EMP_TEST01 에서 부서명이 '인사관리부'인 직원의
-- 월급을 모두 350만원으로 인상
SELECT
    EMP_ID 사원번호,
    EMP_NAME 사원명,
    DEPT_CODE 부서명,
    SALARY 봉급 ,
    HIRE_DATE 입사일,
    SALARY + 3500000 인상봉급
FROM 
    EMP_TEST1 A,
    DEPARTMENT B
WHERE A.DEPT_CODE = B.DEPT_ID
AND DEPT_TITLE LIKE '인사관리부';

--연봉 인상
UPDATE EMP_TEST1
SET SALARY = SALARY+3500000
WHERE DEPT_CODE = 'D1';

SELECT *
FROM EMP_TEST1
WHERE DEPT_CODE ='D1';


-- 4. M_TB01테이블을 생성하고 안에 ID, NAME을 만들고
-- M_TB02 테이블 안에 ID, NAME을 만들어서
-- 각각 데이터를 3개 정도 삽입 후 MERGE 하시오

--테이블 2개 생성
CREATE TABLE M_TB01(
    ID VARCHAR2(20) NOT NULL,
    NAME VARCHAR2(30) NOT NULL
);

CREATE TABLE M_TB02(
    ID VARCHAR2(20) NOT NULL,
    NAME VARCHAR2(30) NOT NULL
);

--정보 삽입
INSERT INTO M_TB01 (ID,NAME) VALUES ('jong6526','최윤종');
INSERT INTO M_TB01 (ID,NAME) VALUES ('sunk22','최종윤');
INSERT INTO M_TB01 (ID,NAME) VALUES ('jihee2237','최지희');

INSERT INTO M_TB02 (ID,NAME) VALUES ('sunk2237','최의종');
INSERT INTO M_TB02 (ID,NAME) VALUES ('jong2237','최민희');
INSERT INTO M_TB02 (ID,NAME) VALUES ('hsk6526','최동춘');

--MERGE
SELECT * FROM M_TB01
UNION
SELECT * FROM M_TB02;




    
-- 5. 영화 에피소드 저장
-- 테이블 명: MOVIE_SPIDERMAN
-- 컬럼 : EPISODE_ID--기본키(SPIDERMAN_PK), EPISODE_NAME, OPEN_YEAR
-- 스파이더맨 시리즈를 순서대로 삽입

CREATE TABLE MOVIE_SPIDERMAN(
    EPISODE_ID NUMBER(5) PRIMARY KEY,
    EPISODE_NAME VARCHAR(30),
    OPEN_YEAR NUMBER(10)
);

COMMENT ON COLUMN MOVIE_SPIDERMAN.EPISODE_ID IS '스파이더맨영화번호';
COMMENT ON COLUMN MOVIE_SPIDERMAN.EPISODE_NAME IS '스파이더맨 제목';
COMMENT ON COLUMN MOVIE_SPIDERMAN.OPEN_YEAR IS '출시년도';

INSERT INTO MOVIE_SPIDERMAN VALUES ('01','스파이더맨1','2002');
INSERT INTO MOVIE_SPIDERMAN VALUES ('02','스파이더맨2','2004');
INSERT INTO MOVIE_SPIDERMAN VALUES ('03','스파이더맨3','2007');
INSERT INTO MOVIE_SPIDERMAN VALUES ('04','어메이징 스파이더맨1','2012');
INSERT INTO MOVIE_SPIDERMAN VALUES ('05','어메이징 스파이더맨2','2014');
INSERT INTO MOVIE_SPIDERMAN VALUES ('06','스파이더맨 홈커밍','2017');
INSERT INTO MOVIE_SPIDERMAN VALUES ('07','스파이더맨 파프롬홈','2019');
INSERT INTO MOVIE_SPIDERMAN VALUES ('08','스파이더맨 노웨이홈','2021');

SELECT 
    EPISODE_ID 번호,
    EPISODE_NAME 영화제목,
    OPEN_YEAR 영화출시년도
FROM MOVIE_SPIDERMAN;

DROP TABLE MOVIE_SPIDERMAN;

-- 6. EMP_SALARY 테이블을 생성하고
-- 유럽 근무지역에 근무하는 직원의 부서를 D3으로 변경. (다중행 서브쿼리를 이용한 UPDATE)

--테이블 작성
CREATE TABLE EMP_SALARY
AS
SELECT * FROM EMPLOYEE;

--테이블 조회
SELECT * FROM EMP_SALARY;

--변경
UPDATE EMP_SALARY
SET DEPT_CODE = 'D3'
WHERE DEPT_CODE = (SELECT 
            A.DEPT_CODE
        FROM
            EMPLOYEE A,
            DEPARTMENT B,
            LOCATION C
        WHERE B.LOCATION_ID = C.LOCAL_CODE
        AND C.NATIONAL_CODE = 'EU');
            

ROLLBACK;



-- 7. EMP_SALARY 테이블에서 송은희, 하이유 사원의 급여를
-- 선동일 사원과 동일하게 변경. (UPDATE 문)
UPDATE EMP_SALARY
SET SALARY =(
            SELECT SALARY
            FROM EMP_TEST1
            WHERE EMP_NAME = '선동일')
WHERE EMP_NAME IN ('송은희','하이유');

SELECT * FROM EMP_SALARY WHERE EMP_NAME IN ('송은희','하이유','선동일');



-- 8. TEST_DEPARTMENT 테이블을 생성하고 (DEPARTMENT 테이블 가져옴)
-- 중국에서 일하던 사원들이 미국으로 인사발령을 받았다.
-- 이를 반영하는 UPDATE문을 작성하시오.

--테이블 생성
CREATE TABLE TEST_DEPARTMENT
AS
SELECT * FROM DEPARTMENT;

--조회
SELECT * FROM TEST_DEPARTMENT;

--변경
UPDATE TEST_DEPARTMENT
SET LOCATION_ID = 'L4'
WHERE LOCATION_ID = 'L3';

SELECT * FROM TEST_DEPARTMENT;


-- 9. EMPLOYEE 테이블에서 직급이 사원이면서 유럽에 근무하는 직원의
-- 사번, 이름, 직급명, 근무지명, 부서명을 조회하시오.
SELECT
    A.EMP_ID 사번,
    A.EMP_NAME 이름,
    C.JOB_NAME 직급명,
    D.LOCAL_NAME 근무지명,
    B.DEPT_TITLE  부서명
FROM 
    EMPLOYEE A,
    DEPARTMENT B,
    JOB C,
    LOCATION D
WHERE A.DEPT_CODE = B.DEPT_ID
AND B.LOCATION_ID = D.LOCAL_CODE
AND D.LOCAL_NAME = 'EU';
    
-- 10.. EMPLOYEE 테이블에서 급여가 3,000,000원 이상인 직원의
-- 사번, 이름, 급여를 조회하여
-- HIGH_SAL 테이블에 삽입하고
-- 그 미만으로 받는 직원들은 LOW_SAL 테이블에 삽입하시오.
DROP TABLE EMP_HIGH;
DROP TABLE EMP_LOW;

CREATE TABLE EMP_HIGH
AS SELECT EMP_ID, EMP_NAME, HIRE_DATE, SALARY
FROM EMPLOYEE
WHERE 1 = 0;

​

CREATE TABLE EMP_LOW
AS SELECT EMP_ID, EMP_NAME, HIRE_DATE, SALARY
FROM EMPLOYEE
WHERE 1 = 0;

​

INSERT ALL 
WHEN SALARY >= 3000000
THEN INTO EMP_HIGH VALUES(EMP_ID, EMP_NAME, HIRE_DATE, SALARY)
ELSE INTO EMP_LOW VALUES(EMP_ID, EMP_NAME, HIRE_DATE, SALARY)
SELECT EMP_ID, EMP_NAME, HIRE_DATE, SALARY
FROM EMPLOYEE;

SELECT * FROM EMP_HIGH
ORDER BY HIRE_DATE DESC;

SELECT * FROM EMP_LOW
ORDER BY HIRE_DATE DESC;